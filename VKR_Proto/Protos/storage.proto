syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option csharp_namespace = "VKR.Protos";

package storage;

service StorageService {
  rpc UploadFile (stream UploadFileRequest) returns (UploadFileReply);
  rpc DownloadFile (DownloadFileRequest) returns (stream DownloadFileReply);
  rpc DeleteFile (DeleteFileRequest) returns (DeleteFileReply);
  rpc ListFiles (ListFilesRequest) returns (ListFilesReply);
  rpc GetFileStatus (GetFileStatusRequest) returns (GetFileStatusReply);
  rpc GetNodeStatuses (GetNodeStatusesRequest) returns (GetNodeStatusesReply);
  rpc GetNodeConfiguration (GetNodeConfigurationRequest) returns (GetNodeConfigurationReply);
  rpc SimulateNodeFailure (SimulateNodeFailureRequest) returns (SimulateNodeFailureReply);
  rpc RestoreAllNodes (RestoreAllNodesRequest) returns (RestoreAllNodesReply);
  rpc GetFileStatuses (GetFileStatusesRequest) returns (GetFileStatusesReply);
  rpc GetChunkDistribution (GetChunkDistributionRequest) returns (GetChunkDistributionReply);
}

message SimulateNodeFailureRequest {
  string node_id = 1;
}

message SimulateNodeFailureReply {
  bool success = 1;
  string message = 2;
}

message RestoreAllNodesRequest {}

message RestoreAllNodesReply {
  bool success = 1;
  string message = 2;
}

message GetFileStatusesRequest {}

message FileStatusInfo {
  string file_id = 1;
  string file_name = 2;
  bool is_available = 3;
  int32 current_replication_factor = 4;
  int32 desired_replication_factor = 5;
}

message GetFileStatusesReply {
  repeated FileStatusInfo file_statuses = 1;
}

message GetChunkDistributionRequest {}

message ChunkDistributionInfo {
  string chunk_id = 1;
  string file_id = 2;
  string file_name = 3;
  repeated string node_ids = 4;
}

message GetChunkDistributionReply {
  repeated ChunkDistributionInfo chunk_distributions = 1;
}

service NodeInternalService {
  rpc ReplicateChunk (ReplicateChunkRequest) returns (ReplicateChunkReply);
  rpc RequestChunk (RequestChunkRequest) returns (stream RequestChunkReply);
  rpc DeleteChunk (DeleteChunkRequest) returns (DeleteChunkReply);
  rpc Ping (PingRequest) returns (PingReply);
  rpc GetNodeFileList (GetNodeFileListRequest) returns (GetNodeFileListReply);
  rpc AcknowledgeReplica (AcknowledgeReplicaRequest) returns (google.protobuf.Empty);
  rpc FindSuccessor (FindSuccessorRequest) returns (FindSuccessorReply);
  rpc GetPredecessor (GetPredecessorRequest) returns (GetPredecessorReply);
  rpc Notify (NotifyRequest) returns (NotifyReply);
  rpc ReplicateChunkStreaming(stream ReplicateChunkStreamingRequest) returns (ReplicateChunkReply);
}

service AdminService {
  rpc GetSystemStats (GetSystemStatsRequest) returns (GetSystemStatsReply);
  rpc TriggerMaintenance (TriggerMaintenanceRequest) returns (TriggerMaintenanceReply);
}

message AcknowledgeReplicaRequest {
  string file_id = 1;
  string chunk_id = 2;
  string replica_node_id = 3;
  string original_sender_node_id = 4;
}

message UploadFileRequest {
  oneof payload {
    FileMetadata metadata = 1;
    FileChunk chunk = 2;
  }
}

message ReplicateChunkStreamingRequest {
  oneof payload {
    ReplicateChunkMetadata metadata = 1;
    bytes data_chunk = 2;
  }
}

message ReplicateChunkMetadata {
  string file_id = 1;
  string chunk_id = 2;
  int32 chunk_index = 3;
  int64 size = 4;
  string original_node_id = 5;
  FileMetadata parent_file_metadata = 6;
}

message UploadFileReply {
  bool success = 1;
  string message = 2;
  string file_id = 3;
}

message DownloadFileRequest {
  string file_id = 1;
}

message DownloadFileReply {
  oneof payload {
    FileMetadata metadata = 1;
    FileChunk chunk = 2;
  }
}

message DeleteFileRequest {
  string file_id = 1;
}

message DeleteFileReply {
  bool success = 1;
  string message = 2;
}

message ListFilesRequest {}

message ListFilesReply {
  repeated FileMetadata files = 1;
}

message GetFileStatusRequest {
  string file_id = 1;
}

message GetFileStatusReply {
  string file_id = 1;
  FileState status = 2;
  int32 replication_factor = 3;
  repeated ChunkStatusInfo chunk_statuses = 4;
}

message GetNodeStatusesRequest {}

message GetNodeStatusesReply {
  repeated NodeStatusInfo nodes = 1;
}

message ReplicateChunkRequest {
  string file_id = 1;
  string chunk_id = 2;
  int32 chunk_index = 3;
  bytes data = 4;
  string original_node_id = 5;
  FileMetadata parent_file_metadata = 6;
}

message ReplicateChunkReply {
  bool success = 1;
  string message = 2;
}

message RequestChunkRequest {
  string file_id = 1;
  string chunk_id = 2;
}

message RequestChunkReply {
  string chunk_id = 1;
  bytes data = 2;
  bool found = 3;
}

message DeleteChunkRequest {
  string file_id = 1;
  string chunk_id = 2;
}

message DeleteChunkReply {
  bool success = 1;
  string message = 2;
}

message PingRequest {
  string sender_node_id = 1;
}

message PingReply {
  string responder_node_id = 1;
  bool success = 2;
}

message FindSuccessorRequest {
  string key = 1;
}

message FindSuccessorReply {
  NodeInfo successor_node = 1;
}

message GetPredecessorRequest {}

message GetPredecessorReply {
  NodeInfo predecessor_node = 1;
}

message NotifyRequest {
  NodeInfo potential_predecessor = 1;
}

message NotifyReply {}

message GetSystemStatsRequest {}

message GetSystemStatsReply {
  int64 total_storage_used = 1;
  int32 number_of_files = 2;
  int32 number_of_chunks = 3;
  int32 number_of_nodes_online = 4;
}

message TriggerMaintenanceRequest {
  string task_name = 1;
}

message TriggerMaintenanceReply {
  bool success = 1;
  string message = 2;
}

message FileMetadata {
  string file_id = 1;
  string file_name = 2;
  int64 file_size = 3;
  google.protobuf.Timestamp creation_time = 4;
  google.protobuf.Timestamp modification_time = 5;
  string content_type = 6;
  int32 chunk_size = 7;
  int32 total_chunks = 8;
  FileState state = 9;
  int64 expected_file_size = 10;
}

message FileChunk {
  string file_id = 1;
  string chunk_id = 2;
  int32 chunk_index = 3;
  bytes data = 4;
  int32 size = 5;
}

message NodeInfo {
  string node_id = 1;
  string address = 2;
  NodeState state = 3;
  int64 last_seen = 4;
}

message ChunkStatusInfo {
  string chunk_id = 1;
  int32 current_replication = 2;
  repeated NodeInfo locations = 3;
}

message NodeStatusInfo {
  string node_id = 1;
  string address = 2;
  NodeState status = 3;
  string details = 4;
}

message GetNodeConfigurationRequest {}

message GetNodeConfigurationReply {
  string node_id = 1;
  string listen_address = 2;
  string storage_base_path = 3;
  int32 replication_factor = 4;
  int32 default_chunk_size = 5;
  double cpu_usage_percent = 6;
  int64 memory_used_bytes = 7;
  int64 memory_total_bytes = 8;
  int64 disk_space_available_bytes = 9;
  int64 disk_space_total_bytes = 10;
  bool success = 11;
  string error_message = 12;
}

message GetNodeFileListRequest {}

message GetNodeFileListReply {
  repeated FileMetadata files = 1;
}

enum FileState {
  FILE_STATE_UNKNOWN = 0;
  FILE_STATE_UPLOADING = 1;
  FILE_STATE_AVAILABLE = 2;
  FILE_STATE_DELETING = 3;
  FILE_STATE_DELETED = 4;
  FILE_STATE_ERROR = 5;
  FILE_STATE_RECOVERING = 6;
}

enum NodeState {
  NODE_STATE_UNKNOWN = 0;
  NODE_STATE_OFFLINE = 1;
  NODE_STATE_JOINING = 2;
  NODE_STATE_ONLINE = 3;
  NODE_STATE_LEAVING = 4;
  NODE_STATE_ERROR = 5;
}