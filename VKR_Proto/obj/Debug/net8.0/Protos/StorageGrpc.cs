// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/storage.proto
// </auto-generated>
// Original file comments:
// Define the protocol buffers syntax version.
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace VKR.Protos {
  /// <summary>
  /// Service definition for client-facing operations (e.g., from WPF UI).
  /// </summary>
  public static partial class StorageService
  {
    static readonly string __ServiceName = "storage.StorageService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.UploadFileRequest> __Marshaller_storage_UploadFileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.UploadFileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.UploadFileReply> __Marshaller_storage_UploadFileReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.UploadFileReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.DownloadFileRequest> __Marshaller_storage_DownloadFileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.DownloadFileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.DownloadFileReply> __Marshaller_storage_DownloadFileReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.DownloadFileReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.DeleteFileRequest> __Marshaller_storage_DeleteFileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.DeleteFileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.DeleteFileReply> __Marshaller_storage_DeleteFileReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.DeleteFileReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.ListFilesRequest> __Marshaller_storage_ListFilesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.ListFilesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.ListFilesReply> __Marshaller_storage_ListFilesReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.ListFilesReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.GetFileStatusRequest> __Marshaller_storage_GetFileStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.GetFileStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.GetFileStatusReply> __Marshaller_storage_GetFileStatusReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.GetFileStatusReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.GetNodeStatusesRequest> __Marshaller_storage_GetNodeStatusesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.GetNodeStatusesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.GetNodeStatusesReply> __Marshaller_storage_GetNodeStatusesReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.GetNodeStatusesReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.GetNodeConfigurationRequest> __Marshaller_storage_GetNodeConfigurationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.GetNodeConfigurationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.GetNodeConfigurationReply> __Marshaller_storage_GetNodeConfigurationReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.GetNodeConfigurationReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.SimulateNodeFailureRequest> __Marshaller_storage_SimulateNodeFailureRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.SimulateNodeFailureRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.SimulateNodeFailureReply> __Marshaller_storage_SimulateNodeFailureReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.SimulateNodeFailureReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.RestoreAllNodesRequest> __Marshaller_storage_RestoreAllNodesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.RestoreAllNodesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.RestoreAllNodesReply> __Marshaller_storage_RestoreAllNodesReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.RestoreAllNodesReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.GetFileStatusesRequest> __Marshaller_storage_GetFileStatusesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.GetFileStatusesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.GetFileStatusesReply> __Marshaller_storage_GetFileStatusesReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.GetFileStatusesReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.GetChunkDistributionRequest> __Marshaller_storage_GetChunkDistributionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.GetChunkDistributionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.GetChunkDistributionReply> __Marshaller_storage_GetChunkDistributionReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.GetChunkDistributionReply.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.UploadFileRequest, global::VKR.Protos.UploadFileReply> __Method_UploadFile = new grpc::Method<global::VKR.Protos.UploadFileRequest, global::VKR.Protos.UploadFileReply>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "UploadFile",
        __Marshaller_storage_UploadFileRequest,
        __Marshaller_storage_UploadFileReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.DownloadFileRequest, global::VKR.Protos.DownloadFileReply> __Method_DownloadFile = new grpc::Method<global::VKR.Protos.DownloadFileRequest, global::VKR.Protos.DownloadFileReply>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "DownloadFile",
        __Marshaller_storage_DownloadFileRequest,
        __Marshaller_storage_DownloadFileReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.DeleteFileRequest, global::VKR.Protos.DeleteFileReply> __Method_DeleteFile = new grpc::Method<global::VKR.Protos.DeleteFileRequest, global::VKR.Protos.DeleteFileReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteFile",
        __Marshaller_storage_DeleteFileRequest,
        __Marshaller_storage_DeleteFileReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.ListFilesRequest, global::VKR.Protos.ListFilesReply> __Method_ListFiles = new grpc::Method<global::VKR.Protos.ListFilesRequest, global::VKR.Protos.ListFilesReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListFiles",
        __Marshaller_storage_ListFilesRequest,
        __Marshaller_storage_ListFilesReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.GetFileStatusRequest, global::VKR.Protos.GetFileStatusReply> __Method_GetFileStatus = new grpc::Method<global::VKR.Protos.GetFileStatusRequest, global::VKR.Protos.GetFileStatusReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFileStatus",
        __Marshaller_storage_GetFileStatusRequest,
        __Marshaller_storage_GetFileStatusReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.GetNodeStatusesRequest, global::VKR.Protos.GetNodeStatusesReply> __Method_GetNodeStatuses = new grpc::Method<global::VKR.Protos.GetNodeStatusesRequest, global::VKR.Protos.GetNodeStatusesReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNodeStatuses",
        __Marshaller_storage_GetNodeStatusesRequest,
        __Marshaller_storage_GetNodeStatusesReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.GetNodeConfigurationRequest, global::VKR.Protos.GetNodeConfigurationReply> __Method_GetNodeConfiguration = new grpc::Method<global::VKR.Protos.GetNodeConfigurationRequest, global::VKR.Protos.GetNodeConfigurationReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNodeConfiguration",
        __Marshaller_storage_GetNodeConfigurationRequest,
        __Marshaller_storage_GetNodeConfigurationReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.SimulateNodeFailureRequest, global::VKR.Protos.SimulateNodeFailureReply> __Method_SimulateNodeFailure = new grpc::Method<global::VKR.Protos.SimulateNodeFailureRequest, global::VKR.Protos.SimulateNodeFailureReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SimulateNodeFailure",
        __Marshaller_storage_SimulateNodeFailureRequest,
        __Marshaller_storage_SimulateNodeFailureReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.RestoreAllNodesRequest, global::VKR.Protos.RestoreAllNodesReply> __Method_RestoreAllNodes = new grpc::Method<global::VKR.Protos.RestoreAllNodesRequest, global::VKR.Protos.RestoreAllNodesReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RestoreAllNodes",
        __Marshaller_storage_RestoreAllNodesRequest,
        __Marshaller_storage_RestoreAllNodesReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.GetFileStatusesRequest, global::VKR.Protos.GetFileStatusesReply> __Method_GetFileStatuses = new grpc::Method<global::VKR.Protos.GetFileStatusesRequest, global::VKR.Protos.GetFileStatusesReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFileStatuses",
        __Marshaller_storage_GetFileStatusesRequest,
        __Marshaller_storage_GetFileStatusesReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.GetChunkDistributionRequest, global::VKR.Protos.GetChunkDistributionReply> __Method_GetChunkDistribution = new grpc::Method<global::VKR.Protos.GetChunkDistributionRequest, global::VKR.Protos.GetChunkDistributionReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetChunkDistribution",
        __Marshaller_storage_GetChunkDistributionRequest,
        __Marshaller_storage_GetChunkDistributionReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::VKR.Protos.StorageReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of StorageService</summary>
    [grpc::BindServiceMethod(typeof(StorageService), "BindService")]
    public abstract partial class StorageServiceBase
    {
      /// <summary>
      /// RPC for uploading a file. Uses client streaming for the file content.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VKR.Protos.UploadFileReply> UploadFile(grpc::IAsyncStreamReader<global::VKR.Protos.UploadFileRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC for downloading a file. Uses server streaming for the file content.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task DownloadFile(global::VKR.Protos.DownloadFileRequest request, grpc::IServerStreamWriter<global::VKR.Protos.DownloadFileReply> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC for deleting a file across the network.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VKR.Protos.DeleteFileReply> DeleteFile(global::VKR.Protos.DeleteFileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to list files stored in the system (metadata only).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VKR.Protos.ListFilesReply> ListFiles(global::VKR.Protos.ListFilesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to get the status of a specific file (placeholder).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VKR.Protos.GetFileStatusReply> GetFileStatus(global::VKR.Protos.GetFileStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to get the status of nodes in the network.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VKR.Protos.GetNodeStatusesReply> GetNodeStatuses(global::VKR.Protos.GetNodeStatusesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VKR.Protos.GetNodeConfigurationReply> GetNodeConfiguration(global::VKR.Protos.GetNodeConfigurationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VKR.Protos.SimulateNodeFailureReply> SimulateNodeFailure(global::VKR.Protos.SimulateNodeFailureRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VKR.Protos.RestoreAllNodesReply> RestoreAllNodes(global::VKR.Protos.RestoreAllNodesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VKR.Protos.GetFileStatusesReply> GetFileStatuses(global::VKR.Protos.GetFileStatusesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VKR.Protos.GetChunkDistributionReply> GetChunkDistribution(global::VKR.Protos.GetChunkDistributionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for StorageService</summary>
    public partial class StorageServiceClient : grpc::ClientBase<StorageServiceClient>
    {
      /// <summary>Creates a new client for StorageService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public StorageServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for StorageService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public StorageServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected StorageServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected StorageServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// RPC for uploading a file. Uses client streaming for the file content.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::VKR.Protos.UploadFileRequest, global::VKR.Protos.UploadFileReply> UploadFile(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UploadFile(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC for uploading a file. Uses client streaming for the file content.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::VKR.Protos.UploadFileRequest, global::VKR.Protos.UploadFileReply> UploadFile(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_UploadFile, null, options);
      }
      /// <summary>
      /// RPC for downloading a file. Uses server streaming for the file content.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::VKR.Protos.DownloadFileReply> DownloadFile(global::VKR.Protos.DownloadFileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DownloadFile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC for downloading a file. Uses server streaming for the file content.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::VKR.Protos.DownloadFileReply> DownloadFile(global::VKR.Protos.DownloadFileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_DownloadFile, null, options, request);
      }
      /// <summary>
      /// RPC for deleting a file across the network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.DeleteFileReply DeleteFile(global::VKR.Protos.DeleteFileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteFile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC for deleting a file across the network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.DeleteFileReply DeleteFile(global::VKR.Protos.DeleteFileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteFile, null, options, request);
      }
      /// <summary>
      /// RPC for deleting a file across the network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.DeleteFileReply> DeleteFileAsync(global::VKR.Protos.DeleteFileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteFileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC for deleting a file across the network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.DeleteFileReply> DeleteFileAsync(global::VKR.Protos.DeleteFileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteFile, null, options, request);
      }
      /// <summary>
      /// RPC to list files stored in the system (metadata only).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.ListFilesReply ListFiles(global::VKR.Protos.ListFilesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFiles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to list files stored in the system (metadata only).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.ListFilesReply ListFiles(global::VKR.Protos.ListFilesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListFiles, null, options, request);
      }
      /// <summary>
      /// RPC to list files stored in the system (metadata only).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.ListFilesReply> ListFilesAsync(global::VKR.Protos.ListFilesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFilesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to list files stored in the system (metadata only).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.ListFilesReply> ListFilesAsync(global::VKR.Protos.ListFilesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListFiles, null, options, request);
      }
      /// <summary>
      /// RPC to get the status of a specific file (placeholder).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.GetFileStatusReply GetFileStatus(global::VKR.Protos.GetFileStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFileStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to get the status of a specific file (placeholder).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.GetFileStatusReply GetFileStatus(global::VKR.Protos.GetFileStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFileStatus, null, options, request);
      }
      /// <summary>
      /// RPC to get the status of a specific file (placeholder).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.GetFileStatusReply> GetFileStatusAsync(global::VKR.Protos.GetFileStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFileStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to get the status of a specific file (placeholder).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.GetFileStatusReply> GetFileStatusAsync(global::VKR.Protos.GetFileStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFileStatus, null, options, request);
      }
      /// <summary>
      /// RPC to get the status of nodes in the network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.GetNodeStatusesReply GetNodeStatuses(global::VKR.Protos.GetNodeStatusesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNodeStatuses(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to get the status of nodes in the network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.GetNodeStatusesReply GetNodeStatuses(global::VKR.Protos.GetNodeStatusesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNodeStatuses, null, options, request);
      }
      /// <summary>
      /// RPC to get the status of nodes in the network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.GetNodeStatusesReply> GetNodeStatusesAsync(global::VKR.Protos.GetNodeStatusesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNodeStatusesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to get the status of nodes in the network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.GetNodeStatusesReply> GetNodeStatusesAsync(global::VKR.Protos.GetNodeStatusesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNodeStatuses, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.GetNodeConfigurationReply GetNodeConfiguration(global::VKR.Protos.GetNodeConfigurationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNodeConfiguration(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.GetNodeConfigurationReply GetNodeConfiguration(global::VKR.Protos.GetNodeConfigurationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNodeConfiguration, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.GetNodeConfigurationReply> GetNodeConfigurationAsync(global::VKR.Protos.GetNodeConfigurationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNodeConfigurationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.GetNodeConfigurationReply> GetNodeConfigurationAsync(global::VKR.Protos.GetNodeConfigurationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNodeConfiguration, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.SimulateNodeFailureReply SimulateNodeFailure(global::VKR.Protos.SimulateNodeFailureRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SimulateNodeFailure(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.SimulateNodeFailureReply SimulateNodeFailure(global::VKR.Protos.SimulateNodeFailureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SimulateNodeFailure, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.SimulateNodeFailureReply> SimulateNodeFailureAsync(global::VKR.Protos.SimulateNodeFailureRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SimulateNodeFailureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.SimulateNodeFailureReply> SimulateNodeFailureAsync(global::VKR.Protos.SimulateNodeFailureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SimulateNodeFailure, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.RestoreAllNodesReply RestoreAllNodes(global::VKR.Protos.RestoreAllNodesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RestoreAllNodes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.RestoreAllNodesReply RestoreAllNodes(global::VKR.Protos.RestoreAllNodesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RestoreAllNodes, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.RestoreAllNodesReply> RestoreAllNodesAsync(global::VKR.Protos.RestoreAllNodesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RestoreAllNodesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.RestoreAllNodesReply> RestoreAllNodesAsync(global::VKR.Protos.RestoreAllNodesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RestoreAllNodes, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.GetFileStatusesReply GetFileStatuses(global::VKR.Protos.GetFileStatusesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFileStatuses(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.GetFileStatusesReply GetFileStatuses(global::VKR.Protos.GetFileStatusesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFileStatuses, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.GetFileStatusesReply> GetFileStatusesAsync(global::VKR.Protos.GetFileStatusesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFileStatusesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.GetFileStatusesReply> GetFileStatusesAsync(global::VKR.Protos.GetFileStatusesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFileStatuses, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.GetChunkDistributionReply GetChunkDistribution(global::VKR.Protos.GetChunkDistributionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChunkDistribution(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.GetChunkDistributionReply GetChunkDistribution(global::VKR.Protos.GetChunkDistributionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetChunkDistribution, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.GetChunkDistributionReply> GetChunkDistributionAsync(global::VKR.Protos.GetChunkDistributionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChunkDistributionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.GetChunkDistributionReply> GetChunkDistributionAsync(global::VKR.Protos.GetChunkDistributionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetChunkDistribution, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override StorageServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new StorageServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(StorageServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_UploadFile, serviceImpl.UploadFile)
          .AddMethod(__Method_DownloadFile, serviceImpl.DownloadFile)
          .AddMethod(__Method_DeleteFile, serviceImpl.DeleteFile)
          .AddMethod(__Method_ListFiles, serviceImpl.ListFiles)
          .AddMethod(__Method_GetFileStatus, serviceImpl.GetFileStatus)
          .AddMethod(__Method_GetNodeStatuses, serviceImpl.GetNodeStatuses)
          .AddMethod(__Method_GetNodeConfiguration, serviceImpl.GetNodeConfiguration)
          .AddMethod(__Method_SimulateNodeFailure, serviceImpl.SimulateNodeFailure)
          .AddMethod(__Method_RestoreAllNodes, serviceImpl.RestoreAllNodes)
          .AddMethod(__Method_GetFileStatuses, serviceImpl.GetFileStatuses)
          .AddMethod(__Method_GetChunkDistribution, serviceImpl.GetChunkDistribution).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, StorageServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_UploadFile, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::VKR.Protos.UploadFileRequest, global::VKR.Protos.UploadFileReply>(serviceImpl.UploadFile));
      serviceBinder.AddMethod(__Method_DownloadFile, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::VKR.Protos.DownloadFileRequest, global::VKR.Protos.DownloadFileReply>(serviceImpl.DownloadFile));
      serviceBinder.AddMethod(__Method_DeleteFile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VKR.Protos.DeleteFileRequest, global::VKR.Protos.DeleteFileReply>(serviceImpl.DeleteFile));
      serviceBinder.AddMethod(__Method_ListFiles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VKR.Protos.ListFilesRequest, global::VKR.Protos.ListFilesReply>(serviceImpl.ListFiles));
      serviceBinder.AddMethod(__Method_GetFileStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VKR.Protos.GetFileStatusRequest, global::VKR.Protos.GetFileStatusReply>(serviceImpl.GetFileStatus));
      serviceBinder.AddMethod(__Method_GetNodeStatuses, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VKR.Protos.GetNodeStatusesRequest, global::VKR.Protos.GetNodeStatusesReply>(serviceImpl.GetNodeStatuses));
      serviceBinder.AddMethod(__Method_GetNodeConfiguration, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VKR.Protos.GetNodeConfigurationRequest, global::VKR.Protos.GetNodeConfigurationReply>(serviceImpl.GetNodeConfiguration));
      serviceBinder.AddMethod(__Method_SimulateNodeFailure, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VKR.Protos.SimulateNodeFailureRequest, global::VKR.Protos.SimulateNodeFailureReply>(serviceImpl.SimulateNodeFailure));
      serviceBinder.AddMethod(__Method_RestoreAllNodes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VKR.Protos.RestoreAllNodesRequest, global::VKR.Protos.RestoreAllNodesReply>(serviceImpl.RestoreAllNodes));
      serviceBinder.AddMethod(__Method_GetFileStatuses, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VKR.Protos.GetFileStatusesRequest, global::VKR.Protos.GetFileStatusesReply>(serviceImpl.GetFileStatuses));
      serviceBinder.AddMethod(__Method_GetChunkDistribution, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VKR.Protos.GetChunkDistributionRequest, global::VKR.Protos.GetChunkDistributionReply>(serviceImpl.GetChunkDistribution));
    }

  }
  /// <summary>
  /// Service definition for internal node-to-node communication.
  /// </summary>
  public static partial class NodeInternalService
  {
    static readonly string __ServiceName = "storage.NodeInternalService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.ReplicateChunkRequest> __Marshaller_storage_ReplicateChunkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.ReplicateChunkRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.ReplicateChunkReply> __Marshaller_storage_ReplicateChunkReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.ReplicateChunkReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.RequestChunkRequest> __Marshaller_storage_RequestChunkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.RequestChunkRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.RequestChunkReply> __Marshaller_storage_RequestChunkReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.RequestChunkReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.DeleteChunkRequest> __Marshaller_storage_DeleteChunkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.DeleteChunkRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.DeleteChunkReply> __Marshaller_storage_DeleteChunkReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.DeleteChunkReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.PingRequest> __Marshaller_storage_PingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.PingRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.PingReply> __Marshaller_storage_PingReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.PingReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.GetNodeFileListRequest> __Marshaller_storage_GetNodeFileListRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.GetNodeFileListRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.GetNodeFileListReply> __Marshaller_storage_GetNodeFileListReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.GetNodeFileListReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.AcknowledgeReplicaRequest> __Marshaller_storage_AcknowledgeReplicaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.AcknowledgeReplicaRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.FindSuccessorRequest> __Marshaller_storage_FindSuccessorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.FindSuccessorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.FindSuccessorReply> __Marshaller_storage_FindSuccessorReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.FindSuccessorReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.GetPredecessorRequest> __Marshaller_storage_GetPredecessorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.GetPredecessorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.GetPredecessorReply> __Marshaller_storage_GetPredecessorReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.GetPredecessorReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.NotifyRequest> __Marshaller_storage_NotifyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.NotifyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.NotifyReply> __Marshaller_storage_NotifyReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.NotifyReply.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.ReplicateChunkRequest, global::VKR.Protos.ReplicateChunkReply> __Method_ReplicateChunk = new grpc::Method<global::VKR.Protos.ReplicateChunkRequest, global::VKR.Protos.ReplicateChunkReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReplicateChunk",
        __Marshaller_storage_ReplicateChunkRequest,
        __Marshaller_storage_ReplicateChunkReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.RequestChunkRequest, global::VKR.Protos.RequestChunkReply> __Method_RequestChunk = new grpc::Method<global::VKR.Protos.RequestChunkRequest, global::VKR.Protos.RequestChunkReply>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "RequestChunk",
        __Marshaller_storage_RequestChunkRequest,
        __Marshaller_storage_RequestChunkReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.DeleteChunkRequest, global::VKR.Protos.DeleteChunkReply> __Method_DeleteChunk = new grpc::Method<global::VKR.Protos.DeleteChunkRequest, global::VKR.Protos.DeleteChunkReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteChunk",
        __Marshaller_storage_DeleteChunkRequest,
        __Marshaller_storage_DeleteChunkReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.PingRequest, global::VKR.Protos.PingReply> __Method_Ping = new grpc::Method<global::VKR.Protos.PingRequest, global::VKR.Protos.PingReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ping",
        __Marshaller_storage_PingRequest,
        __Marshaller_storage_PingReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.GetNodeFileListRequest, global::VKR.Protos.GetNodeFileListReply> __Method_GetNodeFileList = new grpc::Method<global::VKR.Protos.GetNodeFileListRequest, global::VKR.Protos.GetNodeFileListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNodeFileList",
        __Marshaller_storage_GetNodeFileListRequest,
        __Marshaller_storage_GetNodeFileListReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.AcknowledgeReplicaRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_AcknowledgeReplica = new grpc::Method<global::VKR.Protos.AcknowledgeReplicaRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AcknowledgeReplica",
        __Marshaller_storage_AcknowledgeReplicaRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.FindSuccessorRequest, global::VKR.Protos.FindSuccessorReply> __Method_FindSuccessor = new grpc::Method<global::VKR.Protos.FindSuccessorRequest, global::VKR.Protos.FindSuccessorReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FindSuccessor",
        __Marshaller_storage_FindSuccessorRequest,
        __Marshaller_storage_FindSuccessorReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.GetPredecessorRequest, global::VKR.Protos.GetPredecessorReply> __Method_GetPredecessor = new grpc::Method<global::VKR.Protos.GetPredecessorRequest, global::VKR.Protos.GetPredecessorReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPredecessor",
        __Marshaller_storage_GetPredecessorRequest,
        __Marshaller_storage_GetPredecessorReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.NotifyRequest, global::VKR.Protos.NotifyReply> __Method_Notify = new grpc::Method<global::VKR.Protos.NotifyRequest, global::VKR.Protos.NotifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Notify",
        __Marshaller_storage_NotifyRequest,
        __Marshaller_storage_NotifyReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::VKR.Protos.StorageReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of NodeInternalService</summary>
    [grpc::BindServiceMethod(typeof(NodeInternalService), "BindService")]
    public abstract partial class NodeInternalServiceBase
    {
      /// <summary>
      /// RPC for replicating a chunk to another node.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VKR.Protos.ReplicateChunkReply> ReplicateChunk(global::VKR.Protos.ReplicateChunkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC for requesting a chunk from another node (placeholder).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task RequestChunk(global::VKR.Protos.RequestChunkRequest request, grpc::IServerStreamWriter<global::VKR.Protos.RequestChunkReply> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC for deleting a specific chunk replica on a node.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VKR.Protos.DeleteChunkReply> DeleteChunk(global::VKR.Protos.DeleteChunkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC for checking if a node is alive.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VKR.Protos.PingReply> Ping(global::VKR.Protos.PingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VKR.Protos.GetNodeFileListReply> GetNodeFileList(global::VKR.Protos.GetNodeFileListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Or a simple AckReply {}
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> AcknowledgeReplica(global::VKR.Protos.AcknowledgeReplicaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPCs related to DHT (Distributed Hash Table) management (placeholders).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VKR.Protos.FindSuccessorReply> FindSuccessor(global::VKR.Protos.FindSuccessorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VKR.Protos.GetPredecessorReply> GetPredecessor(global::VKR.Protos.GetPredecessorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VKR.Protos.NotifyReply> Notify(global::VKR.Protos.NotifyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for NodeInternalService</summary>
    public partial class NodeInternalServiceClient : grpc::ClientBase<NodeInternalServiceClient>
    {
      /// <summary>Creates a new client for NodeInternalService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public NodeInternalServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for NodeInternalService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public NodeInternalServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected NodeInternalServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected NodeInternalServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// RPC for replicating a chunk to another node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.ReplicateChunkReply ReplicateChunk(global::VKR.Protos.ReplicateChunkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReplicateChunk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC for replicating a chunk to another node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.ReplicateChunkReply ReplicateChunk(global::VKR.Protos.ReplicateChunkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReplicateChunk, null, options, request);
      }
      /// <summary>
      /// RPC for replicating a chunk to another node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.ReplicateChunkReply> ReplicateChunkAsync(global::VKR.Protos.ReplicateChunkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReplicateChunkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC for replicating a chunk to another node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.ReplicateChunkReply> ReplicateChunkAsync(global::VKR.Protos.ReplicateChunkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReplicateChunk, null, options, request);
      }
      /// <summary>
      /// RPC for requesting a chunk from another node (placeholder).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::VKR.Protos.RequestChunkReply> RequestChunk(global::VKR.Protos.RequestChunkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestChunk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC for requesting a chunk from another node (placeholder).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::VKR.Protos.RequestChunkReply> RequestChunk(global::VKR.Protos.RequestChunkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_RequestChunk, null, options, request);
      }
      /// <summary>
      /// RPC for deleting a specific chunk replica on a node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.DeleteChunkReply DeleteChunk(global::VKR.Protos.DeleteChunkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteChunk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC for deleting a specific chunk replica on a node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.DeleteChunkReply DeleteChunk(global::VKR.Protos.DeleteChunkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteChunk, null, options, request);
      }
      /// <summary>
      /// RPC for deleting a specific chunk replica on a node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.DeleteChunkReply> DeleteChunkAsync(global::VKR.Protos.DeleteChunkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteChunkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC for deleting a specific chunk replica on a node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.DeleteChunkReply> DeleteChunkAsync(global::VKR.Protos.DeleteChunkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteChunk, null, options, request);
      }
      /// <summary>
      /// RPC for checking if a node is alive.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.PingReply Ping(global::VKR.Protos.PingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Ping(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC for checking if a node is alive.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.PingReply Ping(global::VKR.Protos.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ping, null, options, request);
      }
      /// <summary>
      /// RPC for checking if a node is alive.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.PingReply> PingAsync(global::VKR.Protos.PingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC for checking if a node is alive.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.PingReply> PingAsync(global::VKR.Protos.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ping, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.GetNodeFileListReply GetNodeFileList(global::VKR.Protos.GetNodeFileListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNodeFileList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.GetNodeFileListReply GetNodeFileList(global::VKR.Protos.GetNodeFileListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNodeFileList, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.GetNodeFileListReply> GetNodeFileListAsync(global::VKR.Protos.GetNodeFileListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNodeFileListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.GetNodeFileListReply> GetNodeFileListAsync(global::VKR.Protos.GetNodeFileListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNodeFileList, null, options, request);
      }
      /// <summary>
      /// Or a simple AckReply {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty AcknowledgeReplica(global::VKR.Protos.AcknowledgeReplicaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcknowledgeReplica(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Or a simple AckReply {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty AcknowledgeReplica(global::VKR.Protos.AcknowledgeReplicaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AcknowledgeReplica, null, options, request);
      }
      /// <summary>
      /// Or a simple AckReply {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> AcknowledgeReplicaAsync(global::VKR.Protos.AcknowledgeReplicaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcknowledgeReplicaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Or a simple AckReply {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> AcknowledgeReplicaAsync(global::VKR.Protos.AcknowledgeReplicaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AcknowledgeReplica, null, options, request);
      }
      /// <summary>
      /// RPCs related to DHT (Distributed Hash Table) management (placeholders).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.FindSuccessorReply FindSuccessor(global::VKR.Protos.FindSuccessorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindSuccessor(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPCs related to DHT (Distributed Hash Table) management (placeholders).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.FindSuccessorReply FindSuccessor(global::VKR.Protos.FindSuccessorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FindSuccessor, null, options, request);
      }
      /// <summary>
      /// RPCs related to DHT (Distributed Hash Table) management (placeholders).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.FindSuccessorReply> FindSuccessorAsync(global::VKR.Protos.FindSuccessorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindSuccessorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPCs related to DHT (Distributed Hash Table) management (placeholders).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.FindSuccessorReply> FindSuccessorAsync(global::VKR.Protos.FindSuccessorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FindSuccessor, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.GetPredecessorReply GetPredecessor(global::VKR.Protos.GetPredecessorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPredecessor(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.GetPredecessorReply GetPredecessor(global::VKR.Protos.GetPredecessorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPredecessor, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.GetPredecessorReply> GetPredecessorAsync(global::VKR.Protos.GetPredecessorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPredecessorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.GetPredecessorReply> GetPredecessorAsync(global::VKR.Protos.GetPredecessorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPredecessor, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.NotifyReply Notify(global::VKR.Protos.NotifyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Notify(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.NotifyReply Notify(global::VKR.Protos.NotifyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Notify, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.NotifyReply> NotifyAsync(global::VKR.Protos.NotifyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NotifyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.NotifyReply> NotifyAsync(global::VKR.Protos.NotifyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Notify, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override NodeInternalServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NodeInternalServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(NodeInternalServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ReplicateChunk, serviceImpl.ReplicateChunk)
          .AddMethod(__Method_RequestChunk, serviceImpl.RequestChunk)
          .AddMethod(__Method_DeleteChunk, serviceImpl.DeleteChunk)
          .AddMethod(__Method_Ping, serviceImpl.Ping)
          .AddMethod(__Method_GetNodeFileList, serviceImpl.GetNodeFileList)
          .AddMethod(__Method_AcknowledgeReplica, serviceImpl.AcknowledgeReplica)
          .AddMethod(__Method_FindSuccessor, serviceImpl.FindSuccessor)
          .AddMethod(__Method_GetPredecessor, serviceImpl.GetPredecessor)
          .AddMethod(__Method_Notify, serviceImpl.Notify).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NodeInternalServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ReplicateChunk, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VKR.Protos.ReplicateChunkRequest, global::VKR.Protos.ReplicateChunkReply>(serviceImpl.ReplicateChunk));
      serviceBinder.AddMethod(__Method_RequestChunk, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::VKR.Protos.RequestChunkRequest, global::VKR.Protos.RequestChunkReply>(serviceImpl.RequestChunk));
      serviceBinder.AddMethod(__Method_DeleteChunk, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VKR.Protos.DeleteChunkRequest, global::VKR.Protos.DeleteChunkReply>(serviceImpl.DeleteChunk));
      serviceBinder.AddMethod(__Method_Ping, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VKR.Protos.PingRequest, global::VKR.Protos.PingReply>(serviceImpl.Ping));
      serviceBinder.AddMethod(__Method_GetNodeFileList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VKR.Protos.GetNodeFileListRequest, global::VKR.Protos.GetNodeFileListReply>(serviceImpl.GetNodeFileList));
      serviceBinder.AddMethod(__Method_AcknowledgeReplica, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VKR.Protos.AcknowledgeReplicaRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.AcknowledgeReplica));
      serviceBinder.AddMethod(__Method_FindSuccessor, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VKR.Protos.FindSuccessorRequest, global::VKR.Protos.FindSuccessorReply>(serviceImpl.FindSuccessor));
      serviceBinder.AddMethod(__Method_GetPredecessor, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VKR.Protos.GetPredecessorRequest, global::VKR.Protos.GetPredecessorReply>(serviceImpl.GetPredecessor));
      serviceBinder.AddMethod(__Method_Notify, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VKR.Protos.NotifyRequest, global::VKR.Protos.NotifyReply>(serviceImpl.Notify));
    }

  }
  /// <summary>
  /// Service definition for administrative tasks (placeholder).
  /// </summary>
  public static partial class AdminService
  {
    static readonly string __ServiceName = "storage.AdminService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.GetSystemStatsRequest> __Marshaller_storage_GetSystemStatsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.GetSystemStatsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.GetSystemStatsReply> __Marshaller_storage_GetSystemStatsReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.GetSystemStatsReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.TriggerMaintenanceRequest> __Marshaller_storage_TriggerMaintenanceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.TriggerMaintenanceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::VKR.Protos.TriggerMaintenanceReply> __Marshaller_storage_TriggerMaintenanceReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::VKR.Protos.TriggerMaintenanceReply.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.GetSystemStatsRequest, global::VKR.Protos.GetSystemStatsReply> __Method_GetSystemStats = new grpc::Method<global::VKR.Protos.GetSystemStatsRequest, global::VKR.Protos.GetSystemStatsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSystemStats",
        __Marshaller_storage_GetSystemStatsRequest,
        __Marshaller_storage_GetSystemStatsReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::VKR.Protos.TriggerMaintenanceRequest, global::VKR.Protos.TriggerMaintenanceReply> __Method_TriggerMaintenance = new grpc::Method<global::VKR.Protos.TriggerMaintenanceRequest, global::VKR.Protos.TriggerMaintenanceReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TriggerMaintenance",
        __Marshaller_storage_TriggerMaintenanceRequest,
        __Marshaller_storage_TriggerMaintenanceReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::VKR.Protos.StorageReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of AdminService</summary>
    [grpc::BindServiceMethod(typeof(AdminService), "BindService")]
    public abstract partial class AdminServiceBase
    {
      /// <summary>
      /// RPC to get system statistics (placeholder).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VKR.Protos.GetSystemStatsReply> GetSystemStats(global::VKR.Protos.GetSystemStatsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to trigger maintenance tasks (placeholder).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::VKR.Protos.TriggerMaintenanceReply> TriggerMaintenance(global::VKR.Protos.TriggerMaintenanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AdminService</summary>
    public partial class AdminServiceClient : grpc::ClientBase<AdminServiceClient>
    {
      /// <summary>Creates a new client for AdminService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AdminServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AdminService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AdminServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AdminServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AdminServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// RPC to get system statistics (placeholder).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.GetSystemStatsReply GetSystemStats(global::VKR.Protos.GetSystemStatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSystemStats(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to get system statistics (placeholder).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.GetSystemStatsReply GetSystemStats(global::VKR.Protos.GetSystemStatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSystemStats, null, options, request);
      }
      /// <summary>
      /// RPC to get system statistics (placeholder).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.GetSystemStatsReply> GetSystemStatsAsync(global::VKR.Protos.GetSystemStatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSystemStatsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to get system statistics (placeholder).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.GetSystemStatsReply> GetSystemStatsAsync(global::VKR.Protos.GetSystemStatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSystemStats, null, options, request);
      }
      /// <summary>
      /// RPC to trigger maintenance tasks (placeholder).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.TriggerMaintenanceReply TriggerMaintenance(global::VKR.Protos.TriggerMaintenanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TriggerMaintenance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to trigger maintenance tasks (placeholder).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::VKR.Protos.TriggerMaintenanceReply TriggerMaintenance(global::VKR.Protos.TriggerMaintenanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TriggerMaintenance, null, options, request);
      }
      /// <summary>
      /// RPC to trigger maintenance tasks (placeholder).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.TriggerMaintenanceReply> TriggerMaintenanceAsync(global::VKR.Protos.TriggerMaintenanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TriggerMaintenanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to trigger maintenance tasks (placeholder).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::VKR.Protos.TriggerMaintenanceReply> TriggerMaintenanceAsync(global::VKR.Protos.TriggerMaintenanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TriggerMaintenance, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override AdminServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AdminServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(AdminServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetSystemStats, serviceImpl.GetSystemStats)
          .AddMethod(__Method_TriggerMaintenance, serviceImpl.TriggerMaintenance).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AdminServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetSystemStats, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VKR.Protos.GetSystemStatsRequest, global::VKR.Protos.GetSystemStatsReply>(serviceImpl.GetSystemStats));
      serviceBinder.AddMethod(__Method_TriggerMaintenance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::VKR.Protos.TriggerMaintenanceRequest, global::VKR.Protos.TriggerMaintenanceReply>(serviceImpl.TriggerMaintenance));
    }

  }
}
#endregion
