using CommunityToolkit.Mvvm.ComponentModel;

namespace VRK_WPF.MVVM.ViewModel;

/// <summary>
/// ViewModel representing a single node for display in the UI.
/// </summary>
public partial class NodeViewModel : ObservableObject // Inherit from ObservableObject for INotifyPropertyChanged
{
    [ObservableProperty]
    private string? _nodeId; // Backing field generated by [ObservableProperty]

    [ObservableProperty]
    private string? _address; // Backing field generated by [ObservableProperty]

    [ObservableProperty]
    private string? _status; // Backing field for Node Status (e.g., "Online", "Offline", "Checking...")

    [ObservableProperty]
    private string? _statusDetails; // Backing field for more details about the status (e.g., error message)
    
    [ObservableProperty]
    private bool _isSelected;

    // Constructor (optional, properties can be set directly)
    public NodeViewModel(string nodeId, string address, string status = "Unknown", string statusDetails = "")
    {
        _nodeId = nodeId;
        _address = address;
        _status = status;
        _statusDetails = statusDetails;
    }

    // Parameterless constructor for XAML instantiation if needed
    public NodeViewModel() {
        _nodeId = "DesignTime Node";
        _address = "localhost:0000";
        _status = "DesignTime Status";
        _statusDetails = "DesignTime Details";
    }

    // Override ToString for better debugging or simple display
    public override string ToString()
    {
        return $"Node: {NodeId ?? "N/A"} ({Address ?? "N/A"}) - Status: {Status ?? "N/A"}";
    }
    
    partial void OnIsSelectedChanged(bool value)
    {
        // This will be called when IsSelected changes
        // We need to notify the parent view model
    }
}
